//Q1  https://leetcode.com/problems/richest-customer-wealth/

class Solution {
    public int maximumWealth(int[][] accounts) {
        int max = 0;

        for (int i=0; i<accounts.length; ++i) {
            int sum = 0;
            for (int j = 0; j < accounts[i].length; ++j) {
                sum += accounts[i][j];
            }
            if (sum >= max) 
                max = sum;
        }
        return max;
    }
}


//Q2 https://leetcode.com/problems/final-value-of-variable-after-performing-operations/


class Solution {
    public int finalValueAfterOperations(String[] operations) {
        int x = 0;
        for (String i: operations) {
            switch (i) {
                case "X++" -> x++;
                case "++X" -> ++x;
                case "--X" -> --x;
                case "X--" ->  x--;
            }
        }
        return x;
    }
}

//Q3 https://leetcode.com/problems/shuffle-the-array/

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int x = 1;
        int y = n;

        while (y != 2*n - 1) {
            int temp = nums[y];
            
            for (int i = y; i > x; i--) {
                nums[i] = nums[i - 1];
            }
            nums[x] = temp;
            x += 2;
            y++;
        }
        return nums;
    }
}
