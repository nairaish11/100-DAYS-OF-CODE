https://leetcode.com/problems/peak-index-in-a-mountain-array/
class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start = 0;
        int end = arr.length - 1;

        while (start < end) {
            int mid = (start + end) / 2;

            if (arr[mid] > arr[mid + 1]) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
}



https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters/

class Solution {
    public int countGoodSubstrings(String s) {
        int i=0,j=0,count=0;
        HashMap<Character,Integer>map=new HashMap<>();
        while(j<s.length())
        {
            map.put(s.charAt(j),map.getOrDefault(s.charAt(j),0)+1);
            if(j-i+1<3)
            {
                j++;
            }else if(j-i+1==3)
            {
                if(map.size()==3)
                {
                    count++;
                    //System.out.println(map);
                }
                int val=map.get(s.charAt(i));
                val=val-1;
                if(val==0){
                    map.remove(s.charAt(i));
                }else{
                    map.put(s.charAt(i),val);
                    
  https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/                  
                    
                    
                    class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int sum = 0;
        int max = 0;

        for (int val : weights) {
            sum += val;
            max = Math.max(max, val);
        }

        int low = max;
        int high = sum;
        int ans = 0;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (isPossible(weights, days, mid)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    private boolean isPossible(int[] weights, int days, int mid) {
        int d = 1;
        int sum = 0;

        for (int i = 0; i < weights.length; ++i) {
            sum += weights[i];

            if (sum > mid) {
                d++;
                sum = weights[i];
            }
        }
        return d <= days;
    }
}
                }
                
                i++;
                j++;
            }
        }
        return count;
    }
}


class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int sum = 0;
        int max = 0;

        for (int val : weights) {
            sum += val;
            max = Math.max(max, val);
        }

        int low = max;
        int high = sum;
        int ans = 0;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (isPossible(weights, days, mid)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    private boolean isPossible(int[] weights, int days, int mid) {
        int d = 1;
        int sum = 0;

        for (int i = 0; i < weights.length; ++i) {
            sum += weights[i];

            if (sum > mid) {
                d++;
                sum = weights[i];
            }
        }
        return d <= days;
    }
}
