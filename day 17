Take as input S, a string. write a function that removes all consecutive duplicates. Print the value returned.
Input: aabccba.
Output: abcba

/*package whatever //do not write package name here */

import java.io.*;

class GFG {
	public static String removeConsecutiveDuplicates(String input) {
		if(input.length()<=1)
			return input;
		if(input.charAt(0)==input.charAt(1))
			return removeConsecutiveDuplicates(input.substring(1));
		else
			return input.charAt(0) + removeConsecutiveDuplicates(input.substring(1));
	}
	public static void main(String[] args)
	{
		String S1 = "geeksforgeeks";
		System.out.println(removeConsecutiveDuplicates(S1));

		String S2 = "aabcca";
		System.out.println(removeConsecutiveDuplicates(S2));
	}
}

Given an array of numbers, arrange them in a way that yields the largest value.
Input: {1,34,3,98,9,76,45,4}
Output: 998764543431

// Given an array of numbers, program to
// arrange the numbers to form the
// largest number
import java.util.*;

class GFG {

	// The main function that prints the
	// arrangement with the largest value.
	// The function accepts a vector of strings
	static void printLargest(Vector<String> arr)
	{

		Collections.sort(arr, new Comparator<String>()
		{
			// A comparison function which is used by
			// sort() in printLargest()
			@Override public int compare(String X, String Y)
			{

				// first append Y at the end of X
				String XY = X + Y;

				// then append X at the end of Y
				String YX = Y + X;

				// Now see which of the two
				// formed numbers
				// is greater
				return XY.compareTo(YX) > 0 ? -1 : 1;
			}
		});

		Iterator it = arr.iterator();

		while (it.hasNext())
			System.out.print(it.next());
	}

	// Driver code
	public static void main(String[] args)
	{

		Vector<String> arr;
		arr = new Vector<>();

		// output should be 6054854654
		arr.add("54");
		arr.add("546");
		arr.add("548");
		arr.add("60");
		printLargest(arr);
	}
}

Write a program to print the no of palindromic substrings ina given string.
Input: "nitin"
output: 7
*Explanation: [n,i,t,i,n,iti,nitin]



// Java program to Count number of ways we
// can get palindrome string from a given string
import java.util.ArrayList;
import java.util.List;

public class AllPalindromeSubstringsPossible {
	public static List<String> allPalindromeSubstring(String s)
	{
		List<String> list = new ArrayList<String>();

		// moving the pivot from starting till end of the string
		for (float pivot = 0; pivot < s.length(); pivot += .5) {

			// set radius to the first nearest element
			// on left and right
			float palindromeRadius = pivot - (int)pivot;

			// if the position needs to be compared has an element
			// and the characters at left and right matches
			while ((pivot + palindromeRadius) < s.length()
				&& (pivot - palindromeRadius) >= 0
				&& s.charAt((int)(pivot - palindromeRadius))
						== s.charAt((int)(pivot + palindromeRadius))) {

				list.add(s.substring((int)(pivot - palindromeRadius),
									(int)(pivot + palindromeRadius + 1)));

				// increasing the radius by 1 to point to the
				// next elements in left and right
				palindromeRadius++;
			}
		}

		return list;
	}

	// Drivers code
	public static void main(String[] args)
	{
		List<String> list = allPalindromeSubstring("hellolle");
		System.out.println(list.size());
		System.out.println(list);
		list = allPalindromeSubstring("geeksforgeeks");
		System.out.println(list.size());
		System.out.println(list);
	}
}





