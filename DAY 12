https://leetcode.com/problems/max-consecutive-ones-iii/

class Solution {
    public static int longestOnes(int[] nums, int k) {
        int i = 0, j = 0;

        while (i < nums.length) {
            if (nums[i] == 0) {
                k--;
            }
            if (k < 0) {
                if (nums[j] == 0){
                    k++;
                }
                j++;
            }
            i++;
        }
        return i-j;
    }
}

https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/

class Solution {
        public static int longestSubarray(int[] nums) {
        int i = 0;
        int j = 0;
        int k = 1;
        int max = 0;

        while (j < nums.length) {
            if (nums[j] == 0) {
                k--;
            }
            if (k >= 0) {
                max = Math.max(max, j - i + 1);
            } else if (k < 0) {
                while (k < 0) {
                    if (nums[i] == 0) {
                        k++;
                    }
                    i++;
                }
            }
            j++;
        }
        return max - 1;
    }
}

https://leetcode.com/problems/count-number-of-nice-subarrays/

class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int oddSum = 0, res = 0;
        int[] sum = new int[nums.length + 1];
        sum[0] = 1;
        for (int num : nums) {
            oddSum += num & 1;
            sum[oddSum]++;
            if (oddSum >= k) {
                res += sum[oddSum - k];
            }
        }
        return res;
    }
}
