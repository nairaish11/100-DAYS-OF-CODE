https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/

public class MaxVowelsSubstring
{
  static int maxVowelsInSubstring(String s,int k)
  {
      int n = s.length();
      int maxVowels = 0;
      // we iterate till n-k th position of the string 
      for(int i = 0;i < n - k ;i++)
      {
        // We generate the substring of length k using substring().  
        String sub_s = s.substring(i,i+k);
        //then count the vowels in the substring
        int vowels = countVowelsInSubstring(sub_s);
        // update maxVowels if current vowels is greater.
        maxVowels = Math.max(maxVowels,vowels);
 
      }
 
      return maxVowels;
  }
 
  static int countVowelsInSubstring(String s)
  {
      int countVowels = 0;
      for(int i=0; i<s.length();i++)
      {
          //get current char
          char ch = s.charAt(i);
          // check if it is a vowel and increment count.              
          if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' )
          countVowels++;
      }
      return countVowels;
  }
 
  public static void main(String args[])
  {
      String str = "java2blog";
      int k = 3;
      int result = maxVowelsInSubstring(str,k);
 
      System.out.println("The Maximum Vowels present in the Substring of size "+k+" is : "+result);
  }
 
}


https://leetcode.com/problems/grumpy-bookstore-owner/

class Solution(object):
    def maxSatisfied(self, customers, grumpy, X):
        """
        :type customers: List[int]
        :type grumpy: List[int]
        :type X: int
        :rtype: int
        """
        result, max_extra, extra = 0, 0, 0
        for i in xrange(len(customers)):
            result += 0 if grumpy[i] else customers[i]
            extra += customers[i] if grumpy[i] else 0
            if i >= X:
                extra -= customers[i-X] if grumpy[i-X] else 0
            max_extra = max(max_extra, extra)
        return result + max_extra

 

https://leetcode.com/problems/maximize-the-confusion-of-an-exam/

class Solution {
  public int maxConsecutiveAnswers(String answerKey, int k) {
    int ans = 0;
    int maxCount = 0;
    int[] count = new int[2];

    for (int l = 0, r = 0; r < answerKey.length(); ++r) {
      maxCount = Math.max(maxCount, ++count[answerKey.charAt(r) == 'T' ? 1 : 0]);
      while (maxCount + k < r - l + 1)
        --count[answerKey.charAt(l++) == 'T' ? 1 : 0];
      ans = Math.max(ans, r - l + 1);
    }

    return ans;
  }
}
